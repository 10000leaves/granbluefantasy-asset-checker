import html2canvas from "html2canvas";
import { jsPDF } from "jspdf";
import Papa from "papaparse";
import {
  InputItem,
  InputGroup,
  WeaponAwakenings,
  AwakeningType,
} from "@/atoms";

// ExportItemsの型定義（必要なものだけ残す）
export interface ExportItems {
  characters: any[];
  weapons: any[];
  summons: any[];
}

// SessionDataの型定義（必要なものだけ残す）
export interface SessionData {
  inputValues: Record<string, any>;
}

// jsPDFにautoTableを追加するための型拡張
declare module "jspdf" {
  interface jsPDF {
    autoTable: (options: any) => any;
    lastAutoTable: {
      finalY: number;
    };
  }
}

// PDF出力処理
export const generatePDF = async (
  element: HTMLElement,
  inputGroups: InputGroup[],
  sessionData: SessionData,
  pageItems: ExportItems,
) => {
  // PDF出力用には常に明るいテーマを使用する（ダークモードでも白背景・黒文字）
  const isDarkMode = false;

  // HTMLをクローンして、スタイルを適用
  const clonedElement = element.cloneNode(true) as HTMLElement;
  document.body.appendChild(clonedElement);

  // スタイルを調整
  clonedElement.style.width = "800px";
  clonedElement.style.padding = "20px";
  clonedElement.style.backgroundColor = "white";
  clonedElement.style.color = "#000000";
  clonedElement.style.position = "absolute";
  clonedElement.style.left = "-9999px";

  // すべてのテキスト要素の色を黒に
  const textElements = clonedElement.querySelectorAll(
    "p, h1, h2, h3, h4, h5, h6, span, div, caption",
  );
  textElements.forEach((el: Element) => {
    (el as HTMLElement).style.color = "#000000";
  });

  // 背景色を持つ要素の背景色を調整
  const bgElements = clonedElement.querySelectorAll(
    '[style*="background"], [class*="bg-"]',
  );
  bgElements.forEach((el: Element) => {
    const bgEl = el as HTMLElement;
    // 暗い背景色の要素は明るい色に変更
    if (
      bgEl.style.backgroundColor === "#121212" ||
      bgEl.style.backgroundColor === "black"
    ) {
      bgEl.style.backgroundColor = "#f5f5f5";
    }
  });

  // ボーダーの色を調整
  const borderElements = clonedElement.querySelectorAll('[style*="border"]');
  borderElements.forEach((el: Element) => {
    const borderEl = el as HTMLElement;
    if (
      borderEl.style.borderColor === "#ffffff" ||
      borderEl.style.borderColor === "white"
    ) {
      borderEl.style.borderColor = "#000000";
    }
  });

  // MUIのテーマ関連のクラスを持つ要素を調整
  const themeElements = clonedElement.querySelectorAll(
    '[class*="MuiTypography"], [class*="MuiBox"], [class*="MuiPaper"]',
  );
  themeElements.forEach((el: Element) => {
    (el as HTMLElement).style.color = "#000000";
    (el as HTMLElement).style.backgroundColor = "white";
  });

  try {
    // HTML2Canvasを使用して、HTMLを画像に変換
    const canvas = await html2canvas(clonedElement, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: "#ffffff",
      logging: false,
    });

    // PDFを生成
    const pdfWidth = 210; // A4サイズ（mm）
    const pdfHeight = 297;
    const imgWidth = canvas.width;
    const imgHeight = canvas.height;
    const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
    const imgX = (pdfWidth - imgWidth * ratio) / 2;
    const imgY = 10;

    // PDFを生成
    const doc = new jsPDF({
      orientation: "p",
      unit: "mm",
      format: "a4",
      putOnlyUsedFonts: true,
      compress: true,
    });

    // 画像をPDFに追加
    doc.addImage(
      canvas.toDataURL("image/png"),
      "PNG",
      imgX,
      imgY,
      imgWidth * ratio,
      imgHeight * ratio,
    );

    // フッター
    const pageCount = doc.internal.pages ? doc.internal.pages.length - 1 : 1;
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.text(
        `Generated by granblue-asset-checker • ${new Date().toLocaleDateString()}`,
        105,
        287,
        { align: "center" },
      );
    }

    // PDFを保存
    doc.save(
      `granblue-asset-checker-${new Date().toISOString().slice(0, 10)}.pdf`,
    );
  } finally {
    // クローンした要素を削除
    if (clonedElement.parentNode) {
      clonedElement.parentNode.removeChild(clonedElement);
    }
  }
};

// CSV出力処理
export const generateCSV = (
  pageItems: ExportItems,
  inputGroups: InputGroup[],
  sessionData: SessionData,
) => {
  let csvData: any[] = [];

  // ヘッダー行とメタデータ
  csvData.push(["#GRANBLUE_CHECKER_DATA_FORMAT_V1"]);
  csvData.push(["#EXPORT_DATE", new Date().toISOString()]);
  csvData.push([]);

  // セクション区切り - アイテム
  csvData.push(["#SECTION", "ITEMS"]);
  csvData.push(["タイプ", "ID", "名前", "所持数", "覚醒", "備考"]);

  // キャラ
  if (pageItems.characters.length > 0) {
    pageItems.characters.forEach((char) => {
      csvData.push(["character", char.id, char.name, "", "", char.note || ""]);
    });
  }

  // 武器
  if (pageItems.weapons.length > 0) {
    pageItems.weapons.forEach((weapon) => {
      const count = weapon.count || 0;
      const awakenings = weapon.awakenings || {};
      let awakeningInfo = "";

      // 覚醒情報を文字列に変換
      const awakeningParts = Object.entries(awakenings).map(([type, count]) => {
        return `${type}${count}`;
      });

      if (awakeningParts.length > 0) {
        awakeningInfo = awakeningParts.join(",");
      }

      csvData.push([
        "weapon",
        weapon.id,
        weapon.name,
        count.toString(),
        awakeningInfo,
        weapon.note || "",
      ]);
    });
  }

  // 召喚石
  if (pageItems.summons.length > 0) {
    pageItems.summons.forEach((summon) => {
      csvData.push([
        "summon",
        summon.id,
        summon.name,
        "",
        "",
        summon.note || "",
      ]);
    });
  }

  // データがない場合
  if (
    pageItems.characters.length === 0 &&
    pageItems.weapons.length === 0 &&
    pageItems.summons.length === 0
  ) {
    csvData.push(["", "", "選択されたアイテムがありません"]);
  }

  csvData.push([]);

  // セクション区切り - ユーザー情報
  csvData.push(["#SECTION", "USER_INFO"]);
  csvData.push([
    "グループID",
    "グループ名",
    "項目ID",
    "項目名",
    "項目タイプ",
    "値",
  ]);

  // 入力グループごとに情報を追加
  if (inputGroups && inputGroups.length > 0) {
    inputGroups.forEach((group) => {
      if (group.items && group.items.length > 0) {
        group.items.forEach((item) => {
          const value = sessionData?.inputValues
            ? sessionData.inputValues[item.id]
            : null;

          // 生の値を保存（インポート時に正確に復元するため）
          csvData.push([
            group.group_id || "",
            group.group_name || "",
            item.id || "",
            item.name || "",
            item.type || "",
            value !== undefined && value !== null ? String(value) : "",
          ]);
        });
      }
    });
  }

  // CSVに変換
  const csv = Papa.unparse(csvData);

  // BOMを追加して文字化けを防止
  const bom = new Uint8Array([0xef, 0xbb, 0xbf]);
  const blob = new Blob([bom, csv], { type: "text/csv;charset=utf-8;" });
  const url = URL.createObjectURL(blob);
  const link = document.createElement("a");
  link.setAttribute("href", url);
  link.setAttribute(
    "download",
    `granblue-asset-checker-${new Date().toISOString().slice(0, 10)}.csv`,
  );
  link.style.visibility = "hidden";
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

// CSVインポート処理
export const importCSV = (
  csvData: string,
  setSelectedCharacters: (ids: string[]) => void,
  setSelectedWeapons: (ids: string[]) => void,
  setSelectedSummons: (ids: string[]) => void,
  setInputValues: (values: Record<string, any>) => void,
  setWeaponCounts: (counts: Record<string, number>) => void,
  setWeaponAwakenings: (awakenings: Record<string, WeaponAwakenings>) => void,
  currentSelectedCharacters: string[],
  currentSelectedWeapons: string[],
  currentSelectedSummons: string[],
  currentInputValues: Record<string, any>,
  currentWeaponCounts: Record<string, number>,
  currentWeaponAwakenings: Record<string, WeaponAwakenings>,
  setCharacterNotes?: (notes: Record<string, string>) => void,
  setWeaponNotes?: (notes: Record<string, string>) => void,
  setSummonNotes?: (notes: Record<string, string>) => void,
  currentCharacterNotes?: Record<string, string>,
  currentWeaponNotes?: Record<string, string>,
  currentSummonNotes?: Record<string, string>,
): { success: boolean; message: string } => {
  try {
    const results = Papa.parse(csvData, { header: false });

    if (!results.data || !Array.isArray(results.data)) {
      return { success: false, message: "CSVの解析に失敗しました" };
    }

    const importedIds: string[] = [];
    const importedUserInfo: Record<string, any> = {};
    const importedWeaponCounts: Record<string, number> = {};
    const importedWeaponAwakenings: Record<string, WeaponAwakenings> = {};

    // CSVフォーマットのバージョンチェック
    let isValidFormat = false;
    let currentSection = "";

    results.data.forEach((row: any, index: number) => {
      if (Array.isArray(row)) {
        // フォーマットバージョンチェック
        if (index === 0 && row[0] === "#GRANBLUE_CHECKER_DATA_FORMAT_V1") {
          isValidFormat = true;
          return;
        }

        // セクション識別
        if (row[0] === "#SECTION" && row.length > 1) {
          currentSection = row[1];
          return;
        }

        // アイテムセクションの処理
        if (currentSection === "ITEMS" && row.length >= 3) {
          const [type, id, name, count, awakening, note] = row;
          if (
            id &&
            typeof id === "string" &&
            !id.startsWith("#") &&
            !id.startsWith("タイプ")
          ) {
            importedIds.push(id);

            // 武器の場合は所持数と覚醒情報も取得
            if (type === "weapon") {
              // 所持数を取得
              if (count && !isNaN(Number(count))) {
                importedWeaponCounts[id] = Number(count);
              }

              // 覚醒情報を取得
              if (awakening) {
                // 複数の覚醒情報をカンマで区切る
                const awakeningParts = awakening.split(",");
                const newAwakenings: WeaponAwakenings = {};

                for (const part of awakeningParts) {
                  // 覚醒情報のフォーマット: "タイプ数字" (例: "攻撃3")
                  const match = part.match(
                    /^(攻撃|防御|特殊|連撃|回復|奥義|アビD)(\d+)$/,
                  );
                  if (match) {
                    const type = match[1] as AwakeningType;
                    const count = Number(match[2]);
                    if (count > 0 && count <= 5) {
                      newAwakenings[type] = count;
                    }
                  }
                }

                if (Object.keys(newAwakenings).length > 0) {
                  importedWeaponAwakenings[id] = newAwakenings;
                }
              }

              // 備考を取得
              if (note && setWeaponNotes && currentWeaponNotes) {
                const newNotes = { ...currentWeaponNotes };
                newNotes[id] = note;
                setWeaponNotes(newNotes);
              }
            } else if (type === "character") {
              // キャラクターの備考を取得
              if (note && setCharacterNotes && currentCharacterNotes) {
                const newNotes = { ...currentCharacterNotes };
                newNotes[id] = note;
                setCharacterNotes(newNotes);
              }
            } else if (type === "summon") {
              // 召喚石の備考を取得
              if (note && setSummonNotes && currentSummonNotes) {
                const newNotes = { ...currentSummonNotes };
                newNotes[id] = note;
                setSummonNotes(newNotes);
              }
            }
          }
        }

        // ユーザー情報セクションの処理
        if (currentSection === "USER_INFO" && row.length >= 6) {
          const [itemId, itemType, value] = row;
          if (
            itemId &&
            typeof itemId === "string" &&
            !itemId.startsWith("#") &&
            !itemId.startsWith("グループID")
          ) {
            // 値の型変換
            let typedValue: any = value;
            if (itemType === "checkbox") {
              typedValue = value === "true";
            } else if (itemType === "number") {
              typedValue = value ? Number(value) : null;
            }

            importedUserInfo[itemId] = typedValue;
          }
        }
      }
    });

    // 古いフォーマットの場合のフォールバック処理
    if (!isValidFormat) {
      results.data.forEach((row: any) => {
        if (Array.isArray(row) && row.length >= 3) {
          const [id] = row;
          if (id && typeof id === "string" && !id.startsWith("#")) {
            importedIds.push(id);
          }
        }
      });
    }

    // アトムを更新
    if (importedIds.length > 0 || Object.keys(importedUserInfo).length > 0) {
      // キャラ、武器、召喚石のIDを分類
      const characterIds: string[] = [];
      const weaponIds: string[] = [];
      const summonIds: string[] = [];

      importedIds.forEach((id) => {
        // IDの先頭文字でタイプを判断
        if (id.startsWith("character_")) {
          characterIds.push(id);
        } else if (id.startsWith("weapon_")) {
          weaponIds.push(id);
        } else if (id.startsWith("summon_")) {
          summonIds.push(id);
        } else {
          // タイプが不明な場合はキャラとして扱う
          characterIds.push(id);
        }
      });

      // 選択状態を更新
      if (characterIds.length > 0) {
        setSelectedCharacters([
          ...new Set([...currentSelectedCharacters, ...characterIds]),
        ]);
      }

      if (weaponIds.length > 0) {
        setSelectedWeapons([
          ...new Set([...currentSelectedWeapons, ...weaponIds]),
        ]);
      }

      if (summonIds.length > 0) {
        setSelectedSummons([
          ...new Set([...currentSelectedSummons, ...summonIds]),
        ]);
      }

      // ユーザー情報を更新
      if (Object.keys(importedUserInfo).length > 0) {
        setInputValues({
          ...currentInputValues,
          ...importedUserInfo,
        });
      }

      // 武器所持数を更新
      if (Object.keys(importedWeaponCounts).length > 0) {
        setWeaponCounts({
          ...currentWeaponCounts,
          ...importedWeaponCounts,
        });
      }

      // 武器覚醒情報を更新
      if (Object.keys(importedWeaponAwakenings).length > 0) {
        setWeaponAwakenings({
          ...currentWeaponAwakenings,
          ...importedWeaponAwakenings,
        });
      }

      let message = "";
      if (importedIds.length > 0 && Object.keys(importedUserInfo).length > 0) {
        message = `${importedIds.length}個のアイテムと${Object.keys(importedUserInfo).length}個のユーザー情報をインポートしました`;
      } else if (importedIds.length > 0) {
        message = `${importedIds.length}個のアイテムをインポートしました`;
      } else {
        message = `${Object.keys(importedUserInfo).length}個のユーザー情報をインポートしました`;
      }

      return { success: true, message };
    } else {
      return {
        success: false,
        message: "インポートするデータが見つかりませんでした",
      };
    }
  } catch (error) {
    console.error("Error importing CSV:", error);
    return { success: false, message: "CSVのインポートに失敗しました" };
  }
};

// 入力項目の値を表示
export const renderInputValue = (item: InputItem, value: any): string => {
  if (item.type === "checkbox") {
    return value ? "✅" : "❌";
  } else if (item.type === "number" && item.name === "キャラ与ダメ") {
    // valueがundefinedまたはnullの場合は0%を返す
    return `${value !== undefined && value !== null ? value : 0}%`;
  } else {
    return value !== undefined && value !== null ? String(value) : "-";
  }
};
